// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolMedicalWpf.Dal;

#nullable disable

namespace SchoolMedicalWpf.Dal.Migrations
{
    [DbContext(typeof(SchoolmedicalWpfContext))]
    [Migration("20250705065035_UpdateStatusInResults")]
    partial class UpdateStatusInResults
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.HealthCheckResult", b =>
                {
                    b.Property<Guid>("ResultId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ResultID");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("DatePerformed")
                        .HasColumnType("date");

                    b.Property<Guid>("HealthProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfileID");

                    b.Property<string>("Hearing")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Nose")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RecordedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecordedID");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double?>("VisionLeft")
                        .HasColumnType("float");

                    b.Property<double?>("VisionRight")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ResultId")
                        .HasName("PK__HealthCh__97690228D7BA8C5C");

                    b.HasIndex("HealthProfileId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("HealthCheckResult", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.HealthCheckSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("HealthCheckType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TargetGrade")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ScheduleId")
                        .HasName("PK__HealthCh__9C8A5B69CECD15D3");

                    b.ToTable("HealthCheckSchedule", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.HealthProfile", b =>
                {
                    b.Property<Guid>("HealthProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfileID");

                    b.Property<string>("ChronicDiseases")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("DeclarationDate")
                        .HasColumnType("date");

                    b.Property<string>("DrugAllergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FoodAllergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.HasKey("HealthProfileId")
                        .HasName("PK__HealthPr__73C2C2B587E14CF3");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthProfile", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.MedicalEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ParentNotified")
                        .HasColumnType("bit");

                    b.Property<string>("SeverityLevel")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("StaffNurseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffNurseID");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.HasKey("EventId")
                        .HasName("PK__MedicalE__7944C870D7609CCF");

                    b.HasIndex("StaffNurseId");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicalEvent", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.MedicalRegistration", b =>
                {
                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegistrationID");

                    b.Property<DateOnly?>("DateApproved")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateSubmitted")
                        .HasColumnType("date");

                    b.Property<string>("MedicationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ParentalConsent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StaffNurseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffNurseID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("TotalDosages")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("RegistrationId")
                        .HasName("PK__MedicalR__6EF58830AD58F073");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalRegistration", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NotificationID");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SenderID");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SourceID");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32D1A83A45");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE3A73EBFAA9");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "manager"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "nurse"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "parent"
                        });
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("DayOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Grade")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .IsFixedLength();

                    b.Property<string>("ParentEmailAddress")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("ParentPhoneNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("StudentId")
                        .HasName("PK__Student__32C52A7919494F58");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("DayOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCAC642EA5AB");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4efb2b1f-70b4-4587-9cc4-de8f29793951"),
                            EmailAddress = "admin@system.local",
                            FullName = "System Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEN1BYdqnVPb7zRaKOGjp7qkwg8eVt/R132qDqqi+K6C+beWGfpW8eQxlNhjRq8Qykg==",
                            PhoneNumber = "0900000001",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("a7a1d982-e5a0-418b-a98d-981c929eda56"),
                            EmailAddress = "manager@system.local",
                            FullName = "System Manager",
                            PasswordHash = "AQAAAAIAAYagAAAAECHnprDihQeUBqRnWCMBtkWvOBZsLqKfNgmqe7GGuEaSPF0fwErcYoxqMgf1rz9j0Q==",
                            PhoneNumber = "0900000002",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = new Guid("2a9411a6-bc8d-4d87-8e80-d0e124726b49"),
                            EmailAddress = "nurse@system.local",
                            FullName = "System Nurse",
                            PasswordHash = "AQAAAAIAAYagAAAAEN8BDiWU4MpZs43eQWoGXr5Q+iybxXxmj44DkOY0QOOrT2tqcxU8k1bPoFAOJwMYHw==",
                            PhoneNumber = "0900000003",
                            RoleId = 3
                        },
                        new
                        {
                            UserId = new Guid("7222fcfc-d5e3-42e3-bcae-43e819b8ed2f"),
                            EmailAddress = "parent@system.local",
                            FullName = "System Parent",
                            PasswordHash = "AQAAAAIAAYagAAAAECK7usNnHQBcnT/L1Mpz1MeUMyjweoh+EB/HubLCJM8xZ1C8Hbm3o7sC1xgewNP/qA==",
                            PhoneNumber = "0900000004",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.VaccinationResult", b =>
                {
                    b.Property<Guid>("VaccinationResultId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccinationResultID");

                    b.Property<int?>("DoseNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("HealthProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfileID");

                    b.Property<string>("ImmediateReaction")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InjectionSite")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ReactionStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ReactionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RecordedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecordedID");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("SeverityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("VaccinationDate")
                        .HasColumnType("date");

                    b.HasKey("VaccinationResultId")
                        .HasName("PK__Vaccinat__12DE8FD94AFF55DA");

                    b.HasIndex("HealthProfileId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("VaccinationResult", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.VaccinationSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Round")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TargetGrade")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("VaccineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccineID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Vaccinat__9C8A5B69C32EB4D4");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccinationSchedule", (string)null);
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.VaccineDetail", b =>
                {
                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VaccineID");

                    b.Property<string>("AgeRecommendation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContraindicationNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Disease")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DoseNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VaccineName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VaccineType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VaccineId")
                        .HasName("PK__VaccineD__45DC68E9CAA27428");

                    b.ToTable("VaccineDetails");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.HealthCheckResult", b =>
                {
                    b.HasOne("SchoolMedicalWpf.Dal.Entities.HealthProfile", "HealthProfile")
                        .WithMany("HealthCheckResults")
                        .HasForeignKey("HealthProfileId")
                        .IsRequired()
                        .HasConstraintName("FK__HealthChe__Healt__571DF1D5");

                    b.HasOne("SchoolMedicalWpf.Dal.Entities.HealthCheckSchedule", "Schedule")
                        .WithMany("HealthCheckResults")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK__HealthChe__Sched__5629CD9C");

                    b.Navigation("HealthProfile");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.HealthProfile", b =>
                {
                    b.HasOne("SchoolMedicalWpf.Dal.Entities.Student", "Student")
                        .WithMany("HealthProfiles")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__HealthPro__Stude__5070F446");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.MedicalEvent", b =>
                {
                    b.HasOne("SchoolMedicalWpf.Dal.Entities.User", "StaffNurse")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("StaffNurseId")
                        .HasConstraintName("FK__MedicalEv__Staff__5AEE82B9");

                    b.HasOne("SchoolMedicalWpf.Dal.Entities.Student", "Student")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__MedicalEv__Stude__59FA5E80");

                    b.Navigation("StaffNurse");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.MedicalRegistration", b =>
                {
                    b.HasOne("SchoolMedicalWpf.Dal.Entities.Student", "Student")
                        .WithMany("MedicalRegistrations")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__MedicalRe__Stude__5DCAEF64");

                    b.HasOne("SchoolMedicalWpf.Dal.Entities.User", "User")
                        .WithMany("MedicalRegistrations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__MedicalRe__UserI__5EBF139D");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.Notification", b =>
                {
                    b.HasOne("SchoolMedicalWpf.Dal.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__UserI__619B8048");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.User", b =>
                {
                    b.HasOne("SchoolMedicalWpf.Dal.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleID__4D94879B");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.VaccinationResult", b =>
                {
                    b.HasOne("SchoolMedicalWpf.Dal.Entities.HealthProfile", "HealthProfile")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("HealthProfileId")
                        .IsRequired()
                        .HasConstraintName("FK__Vaccinati__Healt__6A30C649");

                    b.HasOne("SchoolMedicalWpf.Dal.Entities.VaccinationSchedule", "Schedule")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK__Vaccinati__Sched__6B24EA82");

                    b.Navigation("HealthProfile");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.VaccinationSchedule", b =>
                {
                    b.HasOne("SchoolMedicalWpf.Dal.Entities.VaccineDetail", "Vaccine")
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("VaccineId")
                        .HasConstraintName("FK__Vaccinati__Vacci__6754599E");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.HealthCheckSchedule", b =>
                {
                    b.Navigation("HealthCheckResults");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.HealthProfile", b =>
                {
                    b.Navigation("HealthCheckResults");

                    b.Navigation("VaccinationResults");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.Student", b =>
                {
                    b.Navigation("HealthProfiles");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicalRegistrations");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.User", b =>
                {
                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicalRegistrations");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.VaccinationSchedule", b =>
                {
                    b.Navigation("VaccinationResults");
                });

            modelBuilder.Entity("SchoolMedicalWpf.Dal.Entities.VaccineDetail", b =>
                {
                    b.Navigation("VaccinationSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
